# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eWw-KPiPj2VkBflMKWzBgv-l_jp9oWgA
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from sklearn.feature_extraction.text import CountVectorizer 
from keras.preprocessing.text import Tokenizer 
from keras.preprocessing.sequence import pad_sequences 
from keras.models import Sequential 
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D 
from sklearn.model_selection import train_test_split 
from keras.utils.np_utils import to_categorical 
import re

data = pd.read_csv('/content/drive/MyDrive/Sentiment.csv') 
# Keeping only the neccessary columns
data = data[['text','sentiment']] 
data.head(10)

data = data[data.sentiment != "Neutral"] 
data['text'] = data['text'].apply(lambda x: x.lower()) 
data['text'] = data['text'].apply((lambda x: re.sub('[^a-zA-z0-9\s]','',x))) 
print(data[ data['sentiment'] == 'Positive'].size) 
print(data[ data['sentiment'] == 'Negative'].size) 
for idx,row in data.iterrows(): 
 row[0] = row[0].replace('rt',' ') 
 
max_fatures = 2000
tokenizer = Tokenizer(num_words=max_fatures, split=' ') 
tokenizer.fit_on_texts(data['text'].values) 
X = tokenizer.texts_to_sequences(data['text'].values) 
X = pad_sequences(X)

embed_dim = 128
lstm_out = 196
model = Sequential() 
model.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1])) 
model.add(SpatialDropout1D(0.4)) 
model.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2)) 
model.add(Dense(2,activation='softmax')) 
model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy']) 
print(model.summary()) 
Model: "sequential"

Y = pd.get_dummies(data['sentiment']).values 
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 42) 
print(X_train.shape,Y_train.shape) 
print(X_test.shape,Y_test.shape)

batch_size = 32
model.fit(X_train, Y_train, epochs = 7, batch_size=batch_size, verbose = 2)

#Extracting a validation set, and measuring score and accuracy. 
validation_size = 1500
X_validate = X_test[-validation_size:] 
Y_validate = Y_test[-validation_size:] 
X_test = X_test[:-validation_size] 
Y_test = Y_test[:-validation_size] 
score,acc = model.evaluate(X_test, Y_test, verbose = 2, batch_size = batch_size) 
print("score: %.2f" % (score)) 
print("acc: %.2f" % (acc))

pos_cnt, neg_cnt, pos_correct, neg_correct = 0, 0, 0, 0
for x in range(len(X_validate)):
  result = model.predict(X_validate[x].reshape(1,X_test.shape[1]),batch_size=1,verbose = 2)[0] 
 
  if np.argmax(result) == np.argmax(Y_validate[x]): 
    if np.argmax(Y_validate[x]) == 0: 
      neg_correct += 1
    else: 
      pos_correct += 1
 
  if np.argmax(Y_validate[x]) == 0:
     neg_cnt += 1
  else:
    pos_cnt += 1
print("pos_acc", pos_correct/pos_cnt*100, "%") 
print("neg_acc", neg_correct/neg_cnt*100, "%")

import pandas as pd
df=pd.read_csv('/content/drive/MyDrive/2020-04-16 Coronavirus Tweets.CSV')
df

df.drop(df.columns[[0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]], axis = 1, inplace = True)
df

df.drop(df.index[10000:], inplace=True)

import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
from nltk.stem import WordNetLemmatizer

import nltk
nltk.download('stopwords')
stop_word=stopwords.words('english')

stop_words=stopwords.words('english')
print(stop_words)

import nltk
nltk.download('punkt')
nltk.download('stopwords')
from nltk.stem import WordNetLemmatizer
nltk.download('wordnet')
stop_words=stopwords.words('english')
lemmatizer=WordNetLemmatizer()
for index,row in df.iterrows():
    print(row['text'])
    filter_sentence=[]
    sentence=row['text']
    sentence=re.sub(r'[^\w\s]','',str(sentence))#cleaning
    words=nltk.word_tokenize(sentence)#tokenization
    words=[w for w in words if not w in stop_words]#stopwords removal
    for word in words:
        filter_sentence.append(lemmatizer.lemmatize(word))#lemmatization
    print(filter_sentence)
    df.loc[:,'text'][index]=filter_sentence

df.head(10)

#to combine words and form text
strlist = []
for lst in df["text"]:
  ele = " ".join(lst)
  strlist.append(ele)
df["text"] = strlist

pip install langdetect

#to remove othr language tweets
from langdetect import detect
for ele in df["text"]:
  try:
    if detect(ele)!="en":
        df.drop(index = [df[df["text"]==ele].index.tolist()[0]],inplace = True) 
  except:
    pass

#applying this model to covid tweet dataset in order to find sentiments for each tweet. 
#Here we use padding to make all the tweets having same shape. 
n,p=0,0
l=list() 
for twt in df["text"]: 
  twt=" ".join(twt) 
#vectorizing the tweet by the pre-fitted tokenizer instance
  twt = tokenizer.texts_to_sequences(twt) 
#padding the tweet to have exactly the same shape as `embedding_2` input
  twt = pad_sequences(twt, maxlen=28, dtype='int32', value=0) 
  print(twt) 
  sentiment = model.predict(twt,batch_size=1,verbose = 2)[0] 
  if (np.argmax(sentiment) == 0): 
    l.append("Negative") 
  elif (np.argmax(sentiment) == 1): 
    l.append("Positive") 
df["sentiment"]=l

#counting positive and negtive sentiments
import matplotlib.pyplot as plt 
import seaborn as sns 
df["sentiment"].value_counts() 
Negative 739 
Positive 330 
Name: sentiment, dtype: int64 
df["sentiment"].value_counts().plot(kind="bar")

#visualizing the positive sentiment scores using bar graph
positive_tweet=df[df['sentiment']=="Positive"]["text"] 
positive_tweet 
for line in positive_tweet: 
 for token in line: 
 print(token) 
pos_tokens=[token for line in positive_tweet for token in line] 
from collections import Counter 
def get_tokens(docx,num=200): 
 word_tokens=Counter(docx) 
 most_common=word_tokens.most_common(num) 
 result=most_common 
 return dict(result) 
get_tokens(pos_tokens) 
most_common_pos_words=get_tokens(pos_tokens) 
pos_df=pd.DataFrame(most_common_pos_words.items(),columns=['words','scores']) 
l=["donation","StayHome","home","community","health","care","healthcare","humanity","family","lockdown","support","time","nature","environment","StaySafe","together"] 
for w in pos_df["words"]: 
 if w in l:
   pass
 else:
   pos_df.drop(index=[pos_df[pos_df["words"]==w].index.tolist()[0]],axis=0,inplace=True) 
pos_df 
plt.figure(figsize=(15,8)) 
sns.barplot(x='words',y='scores',data=pos_df) 
plt.show()

